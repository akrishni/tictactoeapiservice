/*
 * TicTacToe
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by the io.swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.api.util.TicTacToeStatusCode;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;

import javax.validation.constraints.NotNull;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Objects;
import java.util.UUID;

/**
 * TicTacToeGame
 */
@javax.annotation.Generated(value = "io.io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-03-21T18:30:20.420Z")
public class TicTacToeGame implements Serializable {
    private static final long serialVersionUID = 1L;

    @JsonProperty("gameId")
    private UUID gameId = null;

    @JsonProperty("status")
    private String status = null;

    @JsonProperty("gameWinner")
    private String gameWinner = null;

    @JsonProperty("playerToPlayNext")
    private String playerToPlayNext = null;

    @JsonProperty("isPlayedWithComp")
    private Boolean isPlayedWithComp = null;

    @JsonProperty("gameBoard")
    private ArrayList<ArrayList<String>> gameBoard = null;

    @JsonProperty("playerNames")
    private ArrayList<String> playerNames = null;

    @JsonProperty("gameType")
    private String gameType = null;

    private String vacantSpotMarker = "X";

    public TicTacToeGame gameId(UUID gameId) {
        this.gameId = gameId;
        return this;
    }

    /**
     * Gets or Sets game status
     */
    public enum GameStatusEnum {
        InProgress("InProgress"),

        WaitingForPlayers("WaitingForPlayers"),

        GameOverWinner("GameOverWinner"),

        GameOverTie("GameOverTie");

        private String value;

        GameStatusEnum(String value) {
            this.value = value;
        }

        @Override
        @JsonValue
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static GameStatusEnum fromValue(String text) {
            for (GameStatusEnum b : GameStatusEnum.values()) {
                if (String.valueOf(b.value).equals(text)) {
                    return b;
                }
            }
            return null;
        }
    }

    public TicTacToeGame(Players players) {
        if (this.gameId == null) {
            this.gameId = UUID.randomUUID();
        }
        //init players
        this.gameType = players.getGameType().toString();
        this.playerNames = new ArrayList<String>(players.getPlayerNames());
        // initialize game board
        gameBoard = new ArrayList<ArrayList<String>>();

        for (int i = 0; i < 3; i++) {
            ArrayList<String> newList = new ArrayList<String>();
            newList.add(vacantSpotMarker);
            newList.add(vacantSpotMarker);
            newList.add(vacantSpotMarker);
            gameBoard.add(newList);
        }

        //init
        if (this.gameType.equalsIgnoreCase("SINGLEPLAYER")) {
            isPlayedWithComp = true;
            this.status = GameStatusEnum.InProgress.toString();
        } else {
            isPlayedWithComp = false;
            if (this.playerNames.size() == 2) {
                this.status = GameStatusEnum.InProgress.toString();
            } else {
                this.status = GameStatusEnum.WaitingForPlayers.toString();
            }
        }
        //always the player at the top of the list goes first
        playerToPlayNext = this.playerNames.get(0);
    }

    private boolean isAllSpotsTaken() {
        boolean result = false;
        for (int i = 0; i < gameBoard.size(); i++) {              // first iterate through the "outer list"
            for (int j = 0; j < gameBoard.get(i).size(); j++) {   // then iterate through all the "inner lists"
                if (gameBoard.get(i).get(j).equals(vacantSpotMarker)) {
                    return false; // if any spot is not taken
                }
            }
        }
        return result;
    }

    public void updatePlayerTurn() {
        if (playerToPlayNext.equalsIgnoreCase(this.playerNames.get(0))) {
            playerToPlayNext = this.playerNames.get(1);
        } else {
            playerToPlayNext = this.playerNames.get(0);
        }
    }

    public TicTacToeStatusCode applyMove(Move move) {
        //TODO Clean up - error codes should not be hardcoded here
        TicTacToeStatusCode result = TicTacToeStatusCode.OK;
        String playerMakingTheMove = move.getPlayerName();
        String moveMarker = "";

        if (this.playerNames.get(0).equalsIgnoreCase(playerMakingTheMove)) {
            moveMarker = "0";
        } else {
            moveMarker = "1";
        }

        ArrayList<String> firstRow = gameBoard.get(0);
        ArrayList<String> secRow = gameBoard.get(1);
        ArrayList<String> thirdRow = gameBoard.get(2);

        if (move.getGameMove() == Move.GameMoveEnum.UPPERLEFT) {
            if (((String) firstRow.get(0)).equalsIgnoreCase(vacantSpotMarker)) {
                firstRow.set(0, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.UPPERMID) {
            if (((String) firstRow.get(1)).equalsIgnoreCase(vacantSpotMarker)) {
                firstRow.set(1, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.UPPERRIGHT) {
            if (((String) firstRow.get(2)).equalsIgnoreCase(vacantSpotMarker)) {
                firstRow.set(2, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.MIDLEFT) {
            if (((String) secRow.get(0)).equalsIgnoreCase(vacantSpotMarker)) {
                secRow.set(0, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.MIDMID) {
            if (((String) secRow.get(1)).equalsIgnoreCase(vacantSpotMarker)) {
                secRow.set(1, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.MIDRIGHT) {
            if (((String) secRow.get(2)).equalsIgnoreCase(vacantSpotMarker)) {
                secRow.set(2, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.LOWERLEFT) {
            if (((String) thirdRow.get(0)).equalsIgnoreCase(vacantSpotMarker)) {
                thirdRow.set(0, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.LOWERMID) {
            if (((String) thirdRow.get(1)).equalsIgnoreCase(vacantSpotMarker)) {
                thirdRow.set(1, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        if (move.getGameMove() == Move.GameMoveEnum.LOWERRIGHT) {
            if (((String) thirdRow.get(2)).equalsIgnoreCase(vacantSpotMarker)) {
                thirdRow.set(2, moveMarker);
            } else {
                result = TicTacToeStatusCode.INVALID_POSITION;
            }
        }
        gameBoard.set(0, firstRow);
        gameBoard.set(1, secRow);
        gameBoard.set(2, thirdRow);
        // update the turn only if the move is successful
        if (result == TicTacToeStatusCode.OK) {
            updatePlayerTurn();
            checkGameStatus();
        }
        return result;
    }

    public void checkGameStatus() {
        if (this.isThereWinner()) {
            this.status = GameStatusEnum.GameOverWinner.toString();
            return;
        }
        if (this.isAllSpotsTaken()) {
            this.status = GameStatusEnum.GameOverTie.toString();
        } else {
            this.status = GameStatusEnum.InProgress.toString();
        }
    }

    private boolean isThereWinner() {
        boolean result = true;
        ArrayList<String> firstRow = gameBoard.get(0);
        ArrayList<String> secRow = gameBoard.get(1);
        ArrayList<String> thirdRow = gameBoard.get(2);

        if (!firstRow.get(0).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(0).equalsIgnoreCase(firstRow.get(1)) && firstRow.get(1).equalsIgnoreCase(firstRow.get(2))) {
            if (firstRow.get(0).equalsIgnoreCase("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!secRow.get(0).equalsIgnoreCase(vacantSpotMarker) && secRow.get(0).equalsIgnoreCase(secRow.get(1)) && secRow.get(1).equalsIgnoreCase(secRow.get(2))) {
            if (secRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!thirdRow.get(0).equalsIgnoreCase(vacantSpotMarker) && thirdRow.get(0).equalsIgnoreCase(thirdRow.get(1)) && thirdRow.get(1).equalsIgnoreCase(thirdRow.get(2))) {
            if (secRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!firstRow.get(0).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(0).equalsIgnoreCase(secRow.get(0)) && secRow.get(0).equalsIgnoreCase(thirdRow.get(0))) {
            if (firstRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!firstRow.get(1).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(1).equalsIgnoreCase(secRow.get(1)) && secRow.get(1).equalsIgnoreCase(thirdRow.get(1))) {
            if (firstRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!firstRow.get(2).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(2).equalsIgnoreCase(secRow.get(2)) && secRow.get(2).equalsIgnoreCase(thirdRow.get(2))) {
            if (firstRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!firstRow.get(0).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(0).equalsIgnoreCase(secRow.get(1)) && secRow.get(1).equalsIgnoreCase(thirdRow.get(2))) {
            if (firstRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else if (!firstRow.get(2).equalsIgnoreCase(vacantSpotMarker) && firstRow.get(2).equalsIgnoreCase(secRow.get(1)) && secRow.get(1).equalsIgnoreCase(thirdRow.get(0))) {
            if (firstRow.get(0).equals("0")) {
                gameWinner = this.playerNames.get(0);
            } else {
                gameWinner = this.playerNames.get(1);
            }
        } else {
            result = false;
        }
        return result;
    }

    public TicTacToeStatusCode joinGame(Players players){
        TicTacToeStatusCode result = TicTacToeStatusCode.OK;
        if (players.getPlayerNames().size() != 1) {
            result = TicTacToeStatusCode.INVALID_NUMBER_PLAYERS;
        } else if (this.getStatus().equalsIgnoreCase(GameStatusEnum.WaitingForPlayers.toString())){
            this.playerNames.add((String)players.getPlayerNames().get(0));
            this.status = GameStatusEnum.InProgress.toString();
        } else {
            result = TicTacToeStatusCode.INVALID_JOIN;
        }
        return result;
    }

    /**
     * game id
     *
     * @return gameId
     */
    @JsonProperty("gameId")
    @ApiModelProperty(required = true, value = "game id")
    @NotNull
    public UUID getGameId() {
        return gameId;
    }

    public void setGameId(UUID gameId) {
        this.gameId = gameId;
    }

    public TicTacToeGame status(String status) {
        this.status = status;
        return this;
    }

    /**
     * string indicating the status of the game
     *
     * @return status
     */
    @JsonProperty("status")
    @ApiModelProperty(value = "string indicating the status of the game")
    public String getStatus() {
        return status;
    }

    public void setStatus(String status) {
        this.status = status;
    }

    public TicTacToeGame gameWinner(String gameWinner) {
        this.gameWinner = gameWinner;
        return this;
    }

    /**
     * winner of the game
     *
     * @return gameWinner
     */
    @JsonProperty("gameWinner")
    @ApiModelProperty(value = "winner of the game")
    public String getGameWinner() {
        return gameWinner;
    }

    public void setGameWinner(String gameWinner) {
        this.gameWinner = gameWinner;
    }

    public TicTacToeGame playerToPlayNext(String playerToPlayNext) {
        this.playerToPlayNext = playerToPlayNext;
        return this;
    }

    /**
     * player to play the next turn
     *
     * @return playerToPlayNext
     */
    @JsonProperty("playerToPlayNext")
    @ApiModelProperty(value = "player to play the next turn")
    public String getPlayerToPlayNext() {
        return playerToPlayNext;
    }

    public void setPlayerToPlayNext(String playerToPlayNext) {
        this.playerToPlayNext = playerToPlayNext;
    }

    public TicTacToeGame isPlayedWithComp(Boolean isPlayedWithComp) {
        this.isPlayedWithComp = isPlayedWithComp;
        return this;
    }

    /**
     * flag to indicate if the game is played with a computer
     *
     * @return isPlayedWithComp
     */
    @JsonProperty("isPlayedWithComp")
    @ApiModelProperty(value = "flag to indicate if the game is played with a computer")
    public Boolean getIsPlayedWithComp() {
        return isPlayedWithComp;
    }

    public void setIsPlayedWithComp(Boolean isPlayedWithComp) {
        this.isPlayedWithComp = isPlayedWithComp;
    }

    public TicTacToeGame gameBoard(ArrayList<ArrayList<String>> gameBoard) {
        this.gameBoard = gameBoard;
        return this;
    }

    public TicTacToeGame addGameBoardItem(ArrayList<String> gameBoardItem) {
        this.gameBoard.add(gameBoardItem);
        return this;
    }

    /**
     * current state of the game board
     *
     * @return gameBoard
     */
    @JsonProperty("gameBoard")
    @ApiModelProperty(value = "current state of the game board")
    public ArrayList<ArrayList<String>> getGameBoard() {
        return gameBoard;
    }

    public void setGameBoard(ArrayList<ArrayList<String>> gameBoard) {
        this.gameBoard = gameBoard;
    }

    public TicTacToeGame playerNames(ArrayList<String> playerNames) {
        this.playerNames = playerNames;
        return this;
    }

    public TicTacToeGame addPlayerNamesItem(String playerNamesItem) {
        this.playerNames.add(playerNamesItem);
        return this;
    }

    /**
     * names of the player/s playing the game
     *
     * @return playerNames
     */
    @JsonProperty("playerNames")
    @ApiModelProperty(value = "names of the player/s playing the game")
    public ArrayList<String> getPlayerNames() {
        return playerNames;
    }

    public void setPlayerNames(ArrayList<String> playerNames) {
        this.playerNames = playerNames;
    }

    public TicTacToeGame gameType(String gameType) {
        this.gameType = gameType;
        return this;
    }

    /**
     * Get gameType
     *
     * @return gameType
     */
    @JsonProperty("gameType")
    @ApiModelProperty(value = "")
    public String getGameType() {
        return gameType;
    }

    public void setGameType(String gameType) {
        this.gameType = gameType;
    }


    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TicTacToeGame ticTacToeGame = (TicTacToeGame) o;
        return Objects.equals(this.gameId, ticTacToeGame.gameId) &&
                Objects.equals(this.status, ticTacToeGame.status) &&
                Objects.equals(this.gameWinner, ticTacToeGame.gameWinner) &&
                Objects.equals(this.playerToPlayNext, ticTacToeGame.playerToPlayNext) &&
                Objects.equals(this.isPlayedWithComp, ticTacToeGame.isPlayedWithComp) &&
                Objects.equals(this.gameBoard, ticTacToeGame.gameBoard) &&
                Objects.equals(this.playerNames, ticTacToeGame.playerNames) &&
                Objects.equals(this.gameType, ticTacToeGame.gameType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(gameId, status, gameWinner, playerToPlayNext, isPlayedWithComp, gameBoard, playerNames, gameType);
    }


    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class TicTacToeGame {\n");

        sb.append("    gameId: ").append(toIndentedString(gameId)).append("\n");
        sb.append("    status: ").append(toIndentedString(status)).append("\n");
        sb.append("    gameWinner: ").append(toIndentedString(gameWinner)).append("\n");
        sb.append("    playerToPlayNext: ").append(toIndentedString(playerToPlayNext)).append("\n");
        sb.append("    isPlayedWithComp: ").append(toIndentedString(isPlayedWithComp)).append("\n");
        sb.append("    gameBoard: ").append(toIndentedString(gameBoard)).append("\n");
        sb.append("    playerNames: ").append(toIndentedString(playerNames)).append("\n");
        sb.append("    gameType: ").append(toIndentedString(gameType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    /**
     * Convert given string encoded object to json
     */
    public JSONObject toJSON() {
        JSONObject jsonObj = null;
        try {
            JSONParser parser = new JSONParser();
            jsonObj = (JSONObject) parser.parse(this.toString());
        } catch (Exception e) {
            //TODO throw new exception
        }

        return jsonObj;
    }
}

